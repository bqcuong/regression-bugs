package com.milaboratory.core.alignment.blast;

import com.milaboratory.core.sequence.NucleotideSequence;
import org.junit.Ignore;
import org.junit.Test;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintStream;

/**
 * Created by poslavsky on 15/06/15.
 */
@Ignore
public class BlastAlignerTest {
    private static final String outfmt = "7 btop qstart qend sstart send score sseqid";

    @Test
    public void test2() throws Exception {
        BlastAligner<NucleotideSequence> aligner = new BlastAligner<>(NucleotideSequence.ALPHABET,null);
        String query = "CTCAGAACGAACGCTGGCGGCATGCCTAACACATGCAAGTCGAACGAGAAACCAGAGCTTGCTCTGGCGGACAGTGGCGGACGGGTGAGTAACGC";
        NucleotideSequence s = new NucleotideSequence(query);
        for(int i = 0;i< 100;++i){
            System.out.println(aligner.align(s).getHits().get(0).getAlignment());
        }
    }
    @Test
    public void test1() throws Exception {
        ProcessBuilder pb = new ProcessBuilder("blastn", "-db", "/Users/poslavsky/Projects/milab/blast/16SMicrobial", "-num_alignments", "2", "-outfmt", outfmt);
        pb.environment().put("BATCH_SIZE", "1");
        pb.redirectErrorStream(true);

        final Process process = pb.start();
        PrintStream outputStream = new PrintStream(process.getOutputStream());

        String query = "CTCAGAACGAACGCTGGCGGCATGCCTAACACATGCAAGTCGAACGAGAAACCAGAGCTTGCTCTGGCGGACAGTGGCGGACGGGTGAGTAACGC";
//        +
//                "GTGGGAATTTGCCCTTGGGTACGGAACAACTCATGGAAACGTGAGCTAATACCGTATACGCTCTTTTTCTTTAGCGGAAAAAGAGGAAAGATTTATCGCCCT" +
//                "TGGATGAGCCCGCGTTAGATTAGCTAGTTGGTGAGGTAATGGCCCACCAAGGCGACGATCTATAGCTGGTTTGAGAGGATGATCAGCCACACTGGGACTGAG" +
//                "ACACGGCCCAGACTCCTACGGGAGGCAGCAGTGGGGAATATTGGACAATGGGGGCAACCCTGATCCAGCAATGCCGCGTGAGTGAAGAAGGCCTTAGGGTTG" +
//                "TAAAACTCTTTCAGTGGGGAAGATAATGGCGGTACCCACAGAAAAAGCTCCGGCTAACTCCGTGCCAGCAGCCGCGGTAATACGGAGGGAGCTAGCGTTGCT" +
//                "CGGAATTACTGGGCGTAAAGCGTACGTAGGCGGATCAACAAGTTGGGGGTGAAATCCCAGGGCTTAACCCTGGAACTGCCCCCAAAACTATTGATCTAGAGA" +
//                "CCGGGTAAGCGGAATTCCTAGTGTAGAGGTGAAATTCGTAGATATTAGGAAGAACACCAGTGGCGAAGGCGGCTTACTGGACCGGTACTGACGCTAAGGTAC" +
//                "GAAAGCGTGGGGAGCAAACAGGATTAGATACCCTGGTAGTCCACGCCGTAAACGATGGGTGCTAGATGTTGGGGCTTTAAGCTTCAGTGTCGCAGCTAACGC" +
//                "ATTAAGCACCCCGCCTGGGGAGTACGGTCGCAAGATTAAAACTCAAAGGAATTGACGGGGGCCCGCACAAGCGGTGGAGCATGTGGTTTAATTCGAGGCAAC" +
//                "GCGAAGAACCTTACCAGCCCTTGACATACCGGTCGCGATTTCCAGAGATGGATTTCTTCAGTTTGGCTGGACCGGATACAGGTGCTGCATGGCTGTCGTCAG" +
//                "CTCGTGTCGTGAGATGTTGGGTTAAGTCCCGCAACGAGCGCAACCCTCATCTTTAGTTGCCAGCAGTTCGGCTGGGCACTCTAGAGAAACTGCCGGTGATAA" +
//                "GCCGGAGGAAGGTGGGGATGACGTCAAGTCCTCATGGCCCTTATGGGCTGGGCTACACACGTGCTACAATGGCGGTGACAGAGGGATGCAATGGGGCGACCC" +
//                "TGAGCTAATCTCAAAAAACCGTCTCAGTTCGGATTGTTCTCTGCAACTCGAGAGCATGAAGTCGGAATCGCTAGTAATCGCGTATCAGCATGACGCGGTGAA" +
//                "TACGTTCCCGGGCCTTGTACACACCGCCCGTCACACCAAGGGAGTTGGTTCTACCTGAAGATGGTGAGTTAACCCGCAAGGGAGACAGCCAGCCACGGTAGG" +
//                "GTCAGCGACTCGGGTGAAGTCGTAACAAGGTACTCAGAACGAACGCTGGCGGCATGCCTAACACATGCAAGTCGAACGAGAAACCAGAGCTTGCTCTGGCGG" +
//                "ACAGTGGCGGACGGGTGAGTAACGCGTGGGAATTTGCCCTTGGGTACGGAACAACTCATGGAAACGTGAGCTAATACCGTATACGCTCTTTTTCTTTAGCGG" +
//                "AAAAAGAGGAAAGATTTATCGCCCTTGGATGAGCCCGCGTTAGATTAGCTAGTTGGTGAGGTAATGGCCCACCAAGGCGACGATCTATAGCTGGTTTGAGAG" +
//                "GATGATCAGCCACACTGGGACTGAGACACGGCCCAGACTCCTACGGGAGGCAGCAGTGGGGAATATTGGACAATGGGGGCAACCCTGATCCAGCAATGCCGC" +
//                "GTGAGTGAAGAAGGCCTTAGGGTTGTAAAACTCTTTCAGTGGGGAAGATAATGGCGGTACCCACAGAAAAAGCTCCGGCTAACTCCGTGCCAGCAGCCGCGG" +
//                "TAATACGGAGGGAGCTAGCGTTGCTCGGAATTACTGGGCGTAAAGCGTACGTAGGCGGATCAACAAGTTGGGGGTGAAATCCCAGGGCTTAACCCTGGAACT" +
//                "GCCCCCAAAACTATTGATCTAGAGACCGGGTAAGCGGAATTCCTAGTGTAGAGGTGAAATTCGTAGATATTAGGAAGAACACCAGTGGCGAAGGCGGCTTAC" +
//                "TGGACCGGTACTGACGCTAAGGTACGAAAGCGTGGGGAGCAAACAGGATTAGATACCCTGGTAGTCCACGCCGTAAACGATGGGTGCTAGATGTTGGGGCTT" +
//                "TAAGCTTCAGTGTCGCAGCTAACGCATTAAGCACCCCGCCTGGGGAGTACGGTCGCAAGATTAAAACTCAAAGGAATTGACGGGGGCCCGCACAAGCGGTGG" +
//                "AGCATGTGGTTTAATTCGAGGCAACGCGAAGAACCTTACCAGCCCTTGACATACCGGTCGCGATTTCCAGAGATGGATTTCTTCAGTTTGGCTGGACCGGAT" +
//                "ACAGGTGCTGCATGGCTGTCGTCAGCTCGTGTCGTGAGATGTTGGGTTAAGTCCCGCAACGAGCGCAACCCTCATCTTTAGTTGCCAGCAGTTCGGCTGGGC" +
//                "ACTCTAGAGAAACTGCCGGTGATAAGCCGGAGGAAGGTGGGGATGACGTCAAGTCCTCATGGCCCTTATGGGCTGGGCTACACACGTGCTACAATGGCGGTG" +
//                "ACAGAGGGATGCAATGGGGCGACCCTGAGCTAATCTCAAAAAACCGTCTCAGTTCGGATTGTTCTCTGCAACTCGAGAGCATGAAGTCGGAATCGCTAGTAA" +
//                "TCGCGTATCAGCATGACGCGGTGAATACGTTCCCGGGCCTTGTACACACCGCCCGTCACACCAAGGGAGTTGGTTCTACCTGAAGATGGTGAGTTAACCCGC" +
//                "AAGGGAGACAGCCAGCCACGGTAGGGTCAGCGACTCGGGTGAAGTCGTAACAAGGTACTCAGAACGAACGCTGGCGGCATGCCTAACACATGCAAGTCGAAC" +
//                "GAGAAACCAGAGCTTGCTCTGGCGGACAGTGGCGGACGGGTGAGTAACGCGTGGGAATTTGCCCTTGGGTACGGAACAACTCATGGAAACGTGAGCTAATAC" +
//                "CGTATACGCTCTTTTTCTTTAGCGGAAAAAGAGGAAAGATTTATCGCCCTTGGATGAGCCCGCGTTAGATTAGCTAGTTGGTGAGGTAATGGCCCACCAAGG" +
//                "CGACGATCTATAGCTGGTTTGAGAGGATGATCAGCCACACTGGGACTGAGACACGGCCCAGACTCCTACGGGAGGCAGCAGTGGGGAATATTGGACAATGGG" +
//                "GGCAACCCTGATCCAGCAATGCCGCGTGAGTGAAGAAGGCCTTAGGGTTGTAAAACTCTTTCAGTGGGGAAGATAATGGCGGTACCCACAGAAAAAGCTCCG" +
//                "GCTAACTCCGTGCCAGCAGCCGCGGTAATACGGAGGGAGCTAGCGTTGCTCGGAATTACTGGGCGTAAAGCGTACGTAGGCGGATCAACAAGTTGGGGGTGA" +
//                "AATCCCAGGGCTTAACCCTGGAACTGCCCCCAAAACTATTGATCTAGAGACCGGGTAAGCGGAATTCCTAGTGTAGAGGTGAAATTCGTAGATATTAGGAAG" +
//                "AACACCAGTGGCGAAGGCGGCTTACTGGACCGGTACTGACGCTAAGGTACGAAAGCGTGGGGAGCAAACAGGATTAGATACCCTGGTAGTCCACGCCGTAAA" +
//                "CGATGGGTGCTAGATGTTGGGGCTTTAAGCTTCAGTGTCGCAGCTAACGCATTAAGCACCCCGCCTGGGGAGTACGGTCGCAAGATTAAAACTCAAAGGAAT" +
//                "TGACGGGGGCCCGCACAAGCGGTGGAGCATGTGGTTTAATTCGAGGCAACGCGAAGAACCTTACCAGCCCTTGACATACCGGTCGCGATTTCCAGAGATGGA" +
//                "TTTCTTCAGTTTGGCTGGACCGGATACAGGTGCTGCATGGCTGTCGTCAGCTCGTGTCGTGAGATGTTGGGTTAAGTCCCGCAACGAGCGCAACCCTCATCT" +
//                "TTAGTTGCCAGCAGTTCGGCTGGGCACTCTAGAGAAACTGCCGGTGATAAGCCGGAGGAAGGTGGGGATGACGTCAAGTCCTCATGGCCCTTATGGGCTGGG" +
//                "CTACACACGTGCTACAATGGCGGTGACAGAGGGATGCAATGGGGCGACCCTGAGCTAATCTCAAAAAACCGTCTCAGTTCGGATTGTTCTCTGCAACTCGAG" +
//                "AGCATGAAGTCGGAATCGCTAGTAATCGCGTATCAGCATGACGCGGTGAATACGTTCCCGGGCCTTGTACACACCGCCCGTCACACCAAGGGAGTTGGTTCT" +
//                "ACCTGAAGATGGTGAGTTAACCCGCAAGGGAGACAGCCAGCCACGGTAGGGTCAGCGACTCGGGTGAAGTCGTAACAAGGTACTCAGAACGAACGCTGGCGG" +
//                "CATGCCTAACACATGCAAGTCGAACGAGAAACCAGAGCTTGCTCTGGCGGACAGTGGCGGACGGGTGAGTAACGCGTGGGAATTTGCCCTTGGGTACGGAAC";
        NucleotideSequence s = new NucleotideSequence(query);
        NucleotideSequence[] ss = {s, s};
//        , s, s, s, s, s, s, s, s, s, s, s, s, s,
//                s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s,
//                s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s,
//                s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s};
//                s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s,
//                s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s,
//                s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s,
//                s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s,
//                s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s,
//                s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s,
//                s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s,
//                s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s,
//                s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s,
//                s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s,
//                s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s};

        System.out.println("PIS");
        Thread thread = new Thread(new Runnable() {
            @Override
            public void run() {

                BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                String line;
                try {
                    while ((line = reader.readLine()) != null)
                        System.out.println(line);
                } catch (Exception e) {
                }
            }
        });
        thread.start();

        int i = 0;
        for (NucleotideSequence x : ss) {
            System.out.println(i++);
            outputStream.println(">\n" + x.toString());
        }
        outputStream.println(">");

        System.out.println("BEFORE FLUSH");
        outputStream.flush();
        System.out.println("AFTER FLUSH");

        thread.join();
    }
}