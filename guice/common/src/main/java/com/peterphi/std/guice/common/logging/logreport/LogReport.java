package com.peterphi.std.guice.common.logging.logreport;


// This file was generated by colf(1); DO NOT EDIT


import static java.lang.String.format;
import java.util.InputMismatchException;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;


/**
 * Data bean with built-in serialization support.
 * @author generated by colf(1)
 * @see <a href="https://github.com/pascaldekloe/colfer">Colfer's home</a>
 */
public class LogReport implements java.io.Serializable {

	/** The upper limit for serial byte sizes. */
	public static int colferSizeMax = 16 * 1024 * 1024;

	/** The upper limit for the number of elements in a list. */
	public static int colferListMax = 64 * 1024;

	private static final java.nio.charset.Charset _utf8 = java.nio.charset.Charset.forName("UTF-8");
	private static final LogLine[] _zeroLines = new LogLine[0];

	public String serviceId = "";
	public LogLine[] lines = _zeroLines;


	/**
	 * Serializes the object.
	 * All {@code null} entries in {@link #lines} will be replaced with a {@code new} value.
	 * @param buf the data destination.
	 * @param offset the initial index for {@code buf}, inclusive.
	 * @return the final index for {@code buf}, exclusive.
	 * @throws BufferOverflowException when {@code buf} is too small.
	 * @throws IllegalStateException on an upper limit breach defined by either {@link #colferSizeMax} or {@link #colferListMax}.
	 */
	public int marshal(byte[] buf, int offset) {
		int i = offset;
		try {
			if (! this.serviceId.isEmpty()) {
				buf[i++] = (byte) 0;
				int start = ++i;

				String s = this.serviceId;
				for (int sIndex = 0, sLength = s.length(); sIndex < sLength; sIndex++) {
					char c = s.charAt(sIndex);
					if (c < '\u0080') {
						buf[i++] = (byte) c;
					} else if (c < '\u0800') {
						buf[i++] = (byte) (192 | c >>> 6);
						buf[i++] = (byte) (128 | c & 63);
					} else if (c < '\ud800' || c > '\udfff') {
						buf[i++] = (byte) (224 | c >>> 12);
						buf[i++] = (byte) (128 | c >>> 6 & 63);
						buf[i++] = (byte) (128 | c & 63);
					} else {
						int cp = 0;
						if (++sIndex < sLength) cp = Character.toCodePoint(c, s.charAt(sIndex));
						if ((cp >= 1 << 16) && (cp < 1 << 21)) {
							buf[i++] = (byte) (240 | cp >>> 18);
							buf[i++] = (byte) (128 | cp >>> 12 & 63);
							buf[i++] = (byte) (128 | cp >>> 6 & 63);
							buf[i++] = (byte) (128 | cp & 63);
						} else
							buf[i++] = (byte) '?';
					}
				}
				int size = i - start;
				if (size > colferSizeMax)
					throw new IllegalStateException(format("colfer: field com/peterphi/std/guice/common/logging/logreport.LogReport.serviceId size %d exceeds %d UTF-8 bytes", size, colferSizeMax));

				int ii = start - 1;
				if (size > 0x7f) {
					i++;
					for (int x = size; x >= 1 << 14; x >>>= 7) i++;
					System.arraycopy(buf, start, buf, i - size, size);

					do {
						buf[ii++] = (byte) (size | 0x80);
						size >>>= 7;
					} while (size > 0x7f);
				}
				buf[ii] = (byte) size;
			}

			if (this.lines.length != 0) {
				buf[i++] = (byte) 1;
				LogLine[] a = this.lines;

				int x = a.length;
				if (x > colferListMax)
					throw new IllegalStateException(format("colfer: field com/peterphi/std/guice/common/logging/logreport.LogReport.lines length %d exceeds %d elements", x, colferListMax));
				while (x > 0x7f) {
					buf[i++] = (byte) (x | 0x80);
					x >>>= 7;
				}
				buf[i++] = (byte) x;

				for (int ai = 0; ai < a.length; ai++) {
					LogLine o = a[ai];
					if (o == null) {
						o = new LogLine();
						a[ai] = o;
					}
					i = o.marshal(buf, i);
				}
			}

			buf[i++] = (byte) 0x7f;
			return i;
		} catch (IndexOutOfBoundsException e) {
			if (i - offset > colferSizeMax)
				throw new IllegalStateException(format("colfer: serial exceeds %d bytes", colferSizeMax));
			if (i >= buf.length)
				throw new BufferOverflowException();
			throw e;
		}
	}

	/**
	 * Deserializes the object.
	 * @param buf the data source.
	 * @param offset the initial index for {@code buf}, inclusive.
	 * @return the final index for {@code buf}, exclusive.
	 * @throws BufferUnderflowException when {@code buf} is incomplete. (EOF)
	 * @throws SecurityException on an upper limit breach defined by either {@link #colferSizeMax} or {@link #colferListMax}.
	 * @throws InputMismatchException when the data does not match this object's schema.
	 */
	public int unmarshal(byte[] buf, int offset) {
		int i = offset;
		try {
			byte header = buf[i++];

			if (header == (byte) 0) {
				int size = 0;
				for (int shift = 0; true; shift += 7) {
					byte b = buf[i++];
					size |= (b & 0x7f) << shift;
					if (shift == 28 || b >= 0) break;
				}
				if (size > colferSizeMax)
					throw new SecurityException(format("colfer: field com/peterphi/std/guice/common/logging/logreport.LogReport.serviceId size %d exceeds %d UTF-8 bytes", size, colferSizeMax));

				int start = i;
				i += size;
				this.serviceId = new String(buf, start, size, this._utf8);
				header = buf[i++];
			}

			if (header == (byte) 1) {
				int length = 0;
				for (int shift = 0; true; shift += 7) {
					byte b = buf[i++];
					length |= (b & 0x7f) << shift;
					if (shift == 28 || b >= 0) break;
				}
				if (length > colferListMax)
					throw new SecurityException(format("colfer: field com/peterphi/std/guice/common/logging/logreport.LogReport.lines length %d exceeds %d elements", length, colferListMax));

				LogLine[] a = new LogLine[length];
				for (int ai = 0; ai < length; ai++) {
					LogLine o = new LogLine();
					i = o.unmarshal(buf, i);
					a[ai] = o;
				}
				this.lines = a;
				header = buf[i++];
			}

			if (header != (byte) 0x7f)
				throw new InputMismatchException(format("colfer: unknown header at byte %d", i - 1));
		} catch (IndexOutOfBoundsException e) {
			if (i - offset > colferSizeMax)
				throw new SecurityException(format("colfer: serial exceeds %d bytes", colferSizeMax));
			if (i >= buf.length)
				throw new BufferUnderflowException();
			throw new RuntimeException("colfer: bug", e);
		}

		if (i - offset > colferSizeMax)
			throw new SecurityException(format("colfer: serial exceeds %d bytes", colferSizeMax));
		return i;
	}

	public String getServiceId() {
		return this.serviceId;
	}

	public void setServiceId(String value) {
		this.serviceId = value;
	}

	public LogLine[] getLines() {
		return this.lines;
	}

	public void setLines(LogLine[] value) {
		this.lines = value;
	}

	@Override
	public final int hashCode() {
		int h = 1;
		if (this.serviceId != null) h = 31 * h + this.serviceId.hashCode();
		for (LogLine o : this.lines) h = 31 * h + (o == null ? 0 : o.hashCode());
		return h;
	}

	@Override
	public final boolean equals(Object o) {
		return o instanceof LogReport && equals((LogReport) o);
	}

	public final boolean equals(LogReport o) {
		return o != null
			&& java.util.Objects.equals(this.serviceId, o.serviceId)
			&& java.util.Arrays.equals(this.lines, o.lines);
	}

}
